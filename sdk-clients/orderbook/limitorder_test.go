package orderbook

import (
	"math/big"
	"testing"

	web3_provider "github.com/1inch/1inch-sdk-go/internal/web3-provider"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGenerateSalt(t *testing.T) {
	tests := []struct {
		name         string
		extension    Extension
		baseSalt     *big.Int
		expectedSalt string
		expectedErr  string
	}{
		{
			name: "Salt no base",
			extension: Extension{
				MakerAssetSuffix: "0x",
				TakerAssetSuffix: "0x",
				MakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				TakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				Predicate:        "0x",
				MakerPermit:      "0x",
				PreInteraction:   "0x",
				PostInteraction:  "0x2ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646859e6150ac0866635457d36ab318d000000000000000000000000000066593d4e7d3a5f55167f0000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d0000972ad4499f120902631a000095770895ad27ad6b0d9500000000000000000000000000000000000000000000000000000000000000075dec5a",
			},
			expectedSalt: "0x2677cec45f20782506454895743b07ed0eae652cb39033bb6e4a3c7fa8662b5c",
		},
		{
			name: "Salt with base",
			extension: Extension{
				MakerAssetSuffix: "0x",
				TakerAssetSuffix: "0x",
				MakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				TakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				Predicate:        "0x",
				MakerPermit:      "0x",
				PreInteraction:   "0x",
				PostInteraction:  "0x2ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646859e6150ac0866635457d36ab318d000000000000000000000000000066593d4e7d3a5f55167f0000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d0000972ad4499f120902631a000095770895ad27ad6b0d9500000000000000000000000000000000000000000000000000000000000000075dec5a",
			},
			baseSalt:     big.NewInt(11111111),
			expectedSalt: "0x000000000000000000a98ac7743b07ed0eae652cb39033bb6e4a3c7fa8662b5c",
		},
		{
			name: "Salt with base too big",
			extension: Extension{
				MakerAssetSuffix: "0x",
				TakerAssetSuffix: "0x",
				MakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				TakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				Predicate:        "0x",
				MakerPermit:      "0x",
				PreInteraction:   "0x",
				PostInteraction:  "0x2ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646859e6150ac0866635457d36ab318d000000000000000000000000000066593d4e7d3a5f55167f0000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d0000972ad4499f120902631a000095770895ad27ad6b0d9500000000000000000000000000000000000000000000000000000000000000075dec5a",
			},
			baseSalt:     new(big.Int).Sub(new(big.Int).Lsh(big.NewInt(1), 256), big.NewInt(1)),
			expectedErr:  "custom base salt cannot be larger than 96 bits",
			expectedSalt: "0x000000000000000000a98ac7743b07ed0eae652cb39033bb6e4a3c7fa8662b5c",
		},
		{
			name: "Salt with base exactly 96 bits",
			extension: Extension{
				MakerAssetSuffix: "0x",
				TakerAssetSuffix: "0x",
				MakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				TakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				Predicate:        "0x",
				MakerPermit:      "0x",
				PreInteraction:   "0x",
				PostInteraction:  "0x2ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646859e6150ac0866635457d36ab318d000000000000000000000000000066593d4e7d3a5f55167f0000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d0000972ad4499f120902631a000095770895ad27ad6b0d9500000000000000000000000000000000000000000000000000000000000000075dec5a",
			},
			baseSalt:     new(big.Int).Lsh(big.NewInt(1), 95),
			expectedSalt: "0x800000000000000000000000743b07ed0eae652cb39033bb6e4a3c7fa8662b5c",
		},
		{
			name: "Salt with base with 97 bits",
			extension: Extension{
				MakerAssetSuffix: "0x",
				TakerAssetSuffix: "0x",
				MakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				TakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				Predicate:        "0x",
				MakerPermit:      "0x",
				PreInteraction:   "0x",
				PostInteraction:  "0x2ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646859e6150ac0866635457d36ab318d000000000000000000000000000066593d4e7d3a5f55167f0000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d0000972ad4499f120902631a000095770895ad27ad6b0d9500000000000000000000000000000000000000000000000000000000000000075dec5a",
			},
			baseSalt:     new(big.Int).Lsh(big.NewInt(1), 96),
			expectedErr:  "custom base salt cannot be larger than 96 bits",
			expectedSalt: "0x800000000000000000000000743b07ed0eae652cb39033bb6e4a3c7fa8662b5c",
		},
		{
			name: "Salt with base with a base salt provided of 0",
			extension: Extension{
				MakerAssetSuffix: "0x",
				TakerAssetSuffix: "0x",
				MakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				TakingAmountData: "0x2ad5004c60e16e54d5007c80ce329adde5b51ef5000000000000006859e6260000b401bf92000000000000640ac0866635457d36ab318d0000000000000000000066593d4e7d3a5f55167fd18bd45f0b94f54a968f000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d972ad4499f120902631a95770895ad27ad6b0d95",
				Predicate:        "0x",
				MakerPermit:      "0x",
				PreInteraction:   "0x",
				PostInteraction:  "0x2ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646859e6150ac0866635457d36ab318d000000000000000000000000000066593d4e7d3a5f55167f0000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d0000972ad4499f120902631a000095770895ad27ad6b0d9500000000000000000000000000000000000000000000000000000000000000075dec5a",
			},
			baseSalt:     big.NewInt(0),
			expectedSalt: "0x000000000000000000000000743b07ed0eae652cb39033bb6e4a3c7fa8662b5c",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {

			encoded, err := tc.extension.Encode()
			require.NoError(t, err)

			salt, err := GenerateSalt(encoded, tc.baseSalt)
			if tc.expectedErr == "" {
				require.NoError(t, err)
			} else {
				require.Equal(t, tc.expectedErr, err.Error())
				return
			}

			// if a base salt is not present, only check the final 160 bits of the salt (the earlier bits are random)
			if tc.baseSalt == nil {
				assert.Equal(t, tc.expectedSalt[len(tc.expectedSalt)-40:], salt[len(salt)-40:])
			} else {
				assert.Equal(t, tc.expectedSalt, salt)
			}
		})
	}
}

func TestPrivateKeyProviderSignatures(t *testing.T) {
	testPrivateKey := "d8d1f95deb28949ea0ecc4e9a0decf89e98422c2d76ab6e5f736792a388c56c7"

	wallet, err := web3_provider.DefaultWalletOnlyProvider(testPrivateKey, 1)
	require.NoError(t, err)

	tests := []struct {
		name              string
		createOrderParams CreateOrderParams
		expectedSignature string
	}{
		{
			name: "Basic order without extension",
			createOrderParams: CreateOrderParams{
				Wallet:           wallet,
				Salt:             "618054093254",
				MakerAsset:       "0xe9e7cea3dedca5984780bafc599bd69add087d56",
				TakerAsset:       "0x111111111117dc0aa78b770fa6a738034120c302",
				Maker:            "0xfb3c7eb936cAA12B5A884d612393969A557d4307", // wrong maker, but original test used this incorrect maker too
				Taker:            "0x0000000000000000000000000000000000000000",
				MakingAmount:     "1000000000000000000",
				TakingAmount:     "1000000000000000000",
				ExtensionEncoded: "",
			},
			expectedSignature: "0x8e1cbdc41ebb253aea91bfa41a028e735be4a5b25d93da0e3a6817070f40dcd31dfbc38bd3800ce2ff88089c77ca2f442dc84637006808aab0af00d966c917b11b",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			order, err := CreateLimitOrderMessage(tc.createOrderParams, 1)
			require.NoError(t, err)
			assert.Equal(t, tc.expectedSignature, order.Signature)
		})
	}
}
