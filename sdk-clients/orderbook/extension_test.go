package orderbook

import (
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGetConcatenatedInteractions(t *testing.T) {

	tests := []struct {
		name                             string
		extension                        Extension
		expectedConcatenatedInteractions string
	}{
		{
			name: "Single hex value",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"",
					"",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedConcatenatedInteractions: "45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
		},
		{
			name: "Multiple hex value",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"0x12345",
					"",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedConcatenatedInteractions: "1234545c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
		},
		{
			name: "Hex and non-hex values",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"0x12345",
					"nonhex",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedConcatenatedInteractions: "12345nonhex45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			assert.Equal(t, tc.expectedConcatenatedInteractions, tc.extension.getConcatenatedInteractions())
		})
	}
}

func TestGetOffsets(t *testing.T) {

	tests := []struct {
		name            string
		extension       Extension
		expectedOffsets string
	}{
		{
			name: "Single hex value",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"",
					"",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedOffsets: "6578226988316368933689708187117462815671832943811647470634552862441472",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			expectedOffsetsBig, ok := new(big.Int).SetString(tc.expectedOffsets, 10) // base 10 for decimal
			require.True(t, ok)

			offsets := tc.extension.getOffsets()
			assert.Equal(t, offsets.Cmp(expectedOffsetsBig), 0)
		})
	}
}
