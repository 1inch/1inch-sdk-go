package orderbook

import (
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetConcatenatedInteractions(t *testing.T) {

	tests := []struct {
		name                             string
		extension                        Extension
		expectedConcatenatedInteractions string
	}{
		{
			name: "Single hex value",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"",
					"",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedConcatenatedInteractions: "45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
		},
		{
			name: "Multiple hex value",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"0x12345",
					"",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedConcatenatedInteractions: "1234545c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
		},
		{
			name: "Hex and non-hex values",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"0x12345",
					"nonhex",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedConcatenatedInteractions: "12345nonhex45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			assert.Equal(t, tc.expectedConcatenatedInteractions, tc.extension.getConcatenatedInteractions())
		})
	}
}

func TestGetOffsets(t *testing.T) {

	tests := []struct {
		name            string
		extension       Extension
		expectedOffsets string
	}{
		{
			name: "Single hex value",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"",
					"",
					"",
					"0x45c32fa6df82ead1e2ef74d17b76547eddfaff8900000000000000000000000050c5df26654B5EFBdD0c54a062dfa6012933deFe000000000000000000000000111111125421cA6dc452d289314280a0f8842A65000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000663d7724000000000000000000000000000000000000000000000000000000000000001bd104dfa3f550a95a28d404f74c84514a39ba3b20023cf04863ee1b541e952e2649c45c8f394c68e90f38700d9951b4c1b0dc4e7bd2ae2f6fc793db846de75ee3",
					"",
					"",
				},
			},
			expectedOffsets: "F4000000F4000000F40000000000000000000000000000000000000000",
		},
		{
			name: "Simple Fusion Order",
			extension: Extension{
				InteractionsArray: []string{
					"0x",
					"0x",
					"0xfb2809a5314473e1165f6b58018e20ed8f07b84000000000000000666cdada0000b400c45d00767a007e",
					"0xfb2809a5314473e1165f6b58018e20ed8f07b84000000000000000666cdada0000b400c45d00767a007e",
					"0x",
					"0x",
					"0x",
					"0xfb2809a5314473e1165f6b58018e20ed8f07b84000000000000000666cdada0000b400c45d00767a007e",
				},
			},
			expectedOffsets: "000000cd000000540000005400000054000000540000002a0000000000000000",
		},
		{
			name: "Another Fusion Order",
			extension: Extension{
				InteractionsArray: []string{
					"0x",
					"0x",
					"fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666cdf850000b400c45c00688b007e",
					"fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666cdf850000b400c45c00688b007e",
					"0x",
					"0x",
					"0x",
					"0xfb2809A5314473E1165f6B58018E20ed8F07B840666cdf74c0866635457d36ab318d0000f3a44b7b0d08f4e198b80000000000000000000000000000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d000000000000000000000000000040",
				},
			},
			expectedOffsets: "000000cd000000540000005400000054000000540000002a0000000000000000",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			expectedOffsets := strings.ToLower(fmt.Sprintf("%064s", tc.expectedOffsets))

			offsets := tc.extension.getOffsets()
			paddedOffsetHex := strings.ToLower(fmt.Sprintf("%064x", offsets))
			assert.Equal(t, expectedOffsets, paddedOffsetHex)
		})
	}
}

func TestEncode(t *testing.T) {

	tests := []struct {
		name             string
		extension        Extension
		expectedEncoding string
	}{
		{
			name: "Another Fusion Order",
			extension: Extension{
				InteractionsArray: []string{
					"0x",
					"0x",
					"fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666cdf850000b400c45c00688b007e",
					"fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666cdf850000b400c45c00688b007e",
					"0x",
					"0x",
					"0x",
					"0xfb2809A5314473E1165f6B58018E20ed8F07B840666cdf74c0866635457d36ab318d0000f3a44b7b0d08f4e198b80000000000000000000000000000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d000000000000000000000000000040",
				},
			},
			expectedEncoding: "0x000000cd000000540000005400000054000000540000002a0000000000000000fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666cdf850000b400c45c00688b007efb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666cdf850000b400c45c00688b007efb2809A5314473E1165f6B58018E20ed8F07B840666cdf74c0866635457d36ab318d0000f3a44b7b0d08f4e198b80000000000000000000000000000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d000000000000000000000000000040",
		},
		{
			name: "Anotherer Fusion Order",
			extension: Extension{
				InteractionsArray: []string{
					"",
					"",
					"fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666ce2ca0000b400c45c007db8007e",
					"fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666ce2ca0000b400c45c007db8007e",
					"",
					"",
					"",
					"0xfb2809A5314473E1165f6B58018E20ed8F07B840666ce2b9c0866635457d36ab318d0000f3a44b7b0d08f4e198b80000000000000000000000000000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d000000000000000000000000000040",
					"",
				},
			},
			expectedEncoding: "0xcd000000cd000000540000005400000054000000540000002a0000000000000000fb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666ce2ca0000b400c45c007db8007efb2809A5314473E1165f6B58018E20ed8F07B84000000000000000666ce2ca0000b400c45c007db8007efb2809A5314473E1165f6B58018E20ed8F07B840666ce2b9c0866635457d36ab318d0000f3a44b7b0d08f4e198b80000000000000000000000000000d18bd45f0b94f54a968f0000000000000000000000000000000000000000000000000000c976bf098c4dba0a061d000000000000000000000000000040",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			result := tc.extension.Encode()
			assert.Equal(t, strings.ToLower(tc.expectedEncoding), strings.ToLower(result))
		})
	}
}
